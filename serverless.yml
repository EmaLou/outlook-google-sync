service: outlook-google-sync

custom:
  redirect_path: 'authorize'
  outlook_scope: 'openid,offline_access,Calendars.Read'
  google_scope: 'https://www.googleapis.com/auth/calendar'
  outlook_queue_name: 'outlook_token_queue'
  google_queue_name: 'google_token_queue'
  processed_queue_name: 'processed_token_queue'
  sync_days: 7
  home_bucket: 'outlook-google-sync'
  config_prefix: 'config'
  cache_prefix: 'cache'
  stageVariables:
    redirect_path: ${self:custom.redirect_path}
    outlook_scope: ${self:custom.outlook_scope} 
    google_scope: ${self:custom.google_scope} 
    outlook_queue_name: ${self:custom.outlook_queue_name} 
    google_queue_name: ${self:custom.google_queue_name} 
    home_bucket: ${self:custom.home_bucket}
    config_prefix: ${self:custom.config_prefix}

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  region: ap-northeast-2
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:Put*"
        - "s3:GetObject"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource: "*"

functions:
  outlookLogin:
    handler: app.outlook_login
    timeout: 15
    events:
      - http:
          path: outlook/login/{id}
          method: get
          cors: true
          private: false
  outlookAuthorize:
    handler: app.outlook_authorize
    timeout: 15
    events:
      - http:
          path: outlook/authorize/{id}
          method: get
          cors: true
          private: false
  googleLogin:
    handler: app.google_login
    timeout: 15
    events:
      - http:
          path: google/login/{id}
          method: get
          cors: true
          private: false
  googleAuthorize:
    handler: app.google_authorize
    timeout: 15
    events:
      - http:
          path: google/authorize/{id}
          method: get
          cors: true
          private: false
  addAttendee:
    handler: app.add_attendee
    timeout: 15
    events:
      - http:
          path: add/attendee
          method: post
          cors: true
          private: false
  addUser:
    handler: app.add_user
    timeout: 15
    events:
      - http:
          path: add/user
          method: post
          cors: true
          private: false
  refreshToken:
    handler: app.refresh_token 
    environment:
      outlook_queue_name: ${self:custom.outlook_queue_name}
      google_queue_name: ${self:custom.google_queue_name}
    events:
      - schedule: rate(30 minutes)
  syncEvents:
    handler: app.sync_events
    environment:
      outlook_queue_name: ${self:custom.outlook_queue_name}
      google_queue_name: ${self:custom.google_queue_name}
      processed_queue_name: ${self:custom.processed_queue_name}
      sync_days: ${self:custom.sync_days}
    events:
      - schedule: rate(60 minutes)
resources:
  Resources:
    HomeS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.home_bucket}
    OutlookTokenQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.outlook_queue_name}
    GoogleTokenQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.google_queue_name}
    ProcesseQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.processed_queue_name}
plugins:
  - serverless-webpack
  - serverless-plugin-stage-variables
